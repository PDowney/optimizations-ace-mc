# WordPress Best Practices Checker using Gemini AI
# Analyzes commits for WordPress coding standards and best practices compliance

name: WordPress Best Practices Check

on:
  push:
    branches: [ main, develop ]
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

# Cancel previous workflow runs for the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  actions: read

jobs:
  wordpress-standards-check:
    name: WordPress Standards & Best Practices
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          
      - name: Get changed PHP files
        id: changed-files
        uses: tj-actions/changed-files@v46
        with:
          files: |
            **/*.php
          separator: "\n"

      - name: Run WordPress Best Practices Analysis
        if: steps.changed-files.outputs.any_changed == 'true'
        env:
          CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          npx @google/gemini-cli@latest --prompt "
          You are a WordPress development expert and WordPress.org plugin reviewer.
          
          WORDPRESS BEST PRACTICES ANALYSIS:
          Review the following code changes for WordPress coding standards and best practices:
          
          üìã CODING STANDARDS (WordPress Coding Standards):
          - PSR-4 autoloading compliance
          - Proper function and variable naming (snake_case)
          - Class naming conventions (PascalCase with underscores)
          - File naming conventions (lowercase with hyphens)
          - Proper indentation (tabs vs spaces - WordPress uses tabs)
          - Line length limits (150 characters max)
          - Proper commenting and PHPDoc blocks
          
          üèóÔ∏è ARCHITECTURE & STRUCTURE:
          - Single responsibility principle
          - Proper use of WordPress hooks (actions/filters)
          - Singleton pattern implementation
          - Plugin structure and organization
          - Proper use of WordPress APIs
            
            üîß WORDPRESS-SPECIFIC BEST PRACTICES:
            - Proper plugin header format
            - Text domain usage and internationalization
            - Capability checks and user permissions
            - Database interaction using WordPress functions
            - Proper enqueueing of scripts and styles
            - Use of WordPress constants and globals
            - Plugin activation/deactivation hooks
            
            ‚ö° PERFORMANCE CONSIDERATIONS:
            - Efficient database queries
            - Proper caching strategies
            - Lazy loading where appropriate
            - Avoiding resource-heavy operations
            - Proper use of transients
            
            üéØ PLUGIN-SPECIFIC CHECKS:
            - WooCommerce integration best practices
            - Admin interface conventions
            - REST API implementation
            - Custom post type registration
            - Meta box implementation
            
            üì± COMPATIBILITY:
            - PHP version compatibility (7.4+)
            - WordPress version compatibility (6.5+)
            - Plugin conflicts avoidance
            - Theme compatibility
            
            For each finding:
            1. Specify the file and line number
            2. Explain the issue and why it matters
            3. Provide the correct WordPress way to implement it
            4. Reference relevant WordPress Codex documentation
            5. Rate severity: CRITICAL, HIGH, MEDIUM, LOW, or INFO
            
            Focus on improvements that enhance:
            - Code maintainability
            - WordPress ecosystem compatibility
            - Performance and user experience
            - Developer experience
            
            FILES TO ANALYZE:
            $CHANGED_FILES
            " > standards-analysis.txt

      - name: Display Standards Analysis Summary
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          echo "=================================="
          echo "üìã WORDPRESS STANDARDS REVIEW"
          echo "=================================="
          echo "Repository: ${{ github.repository }}"
          echo "Commit: ${{ github.sha }}"
          echo "Branch: ${{ github.ref }}"
          echo "Files Analyzed: ${{ steps.changed-files.outputs.all_changed_files_count }}"
          echo "Analysis Date: $(date -u +"%Y-%m-%dT%H:%M:%SZ")"
          echo ""
          echo "üìÅ Files Reviewed:"
          echo "${{ steps.changed-files.outputs.all_changed_files }}"
          echo ""
          echo "ü§ñ WordPress Expert Findings:"
          echo "=================================="
          
          if [ -f "standards-analysis.txt" ]; then
            cat standards-analysis.txt
          else
            echo "‚ö†Ô∏è No analysis output found."
          fi
          
          echo ""
          echo "=================================="
          echo "üìã Recommended Actions:"
          echo "- Review all findings marked as CRITICAL or HIGH priority"
          echo "- Implement suggested WordPress coding standards improvements"
          echo "- Test changes to ensure compatibility with WordPress 6.5+ and PHP 7.4+"
          echo "- Consider performance optimizations where recommended"
          echo "- Update documentation if architectural changes are suggested"
          echo "=================================="

      - name: Create Workflow Summary
        if: steps.changed-files.outputs.any_changed == 'true'
        uses: actions/github-script@v7
        env:
          CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}
          FILES_COUNT: ${{ steps.changed-files.outputs.all_changed_files_count }}
        with:
          script: |
            const fs = require('fs');
            const changedFiles = process.env.CHANGED_FILES;
            const filesCount = process.env.FILES_COUNT;
            
            let analysisContent = 'No analysis output found.';
            try {
              if (fs.existsSync('standards-analysis.txt')) {
                analysisContent = fs.readFileSync('standards-analysis.txt', 'utf8');
              }
            } catch (error) {
              console.log('Error reading analysis file:', error);
              analysisContent = 'Error reading standards analysis results.';
            }
            
            const summaryContent = `
            ## üéØ WordPress Best Practices Analysis Results
            
            **Repository:** ${context.repo.owner}/${context.repo.repo}
            **Commit:** ${context.sha}
            **Branch:** ${context.ref}
            **Files Analyzed:** ${filesCount}
            **Analysis Date:** ${new Date().toISOString()}
            
            ### üìÅ Files Reviewed
            \`\`\`
            ${changedFiles}
            \`\`\`
            
            ---
            
            ### ü§ñ WordPress Expert Findings
            
            ${analysisContent}
            
            ---
            
            ### üìã Recommended Actions
            - Review all findings marked as CRITICAL or HIGH priority
            - Implement suggested WordPress coding standards improvements
            - Test changes to ensure compatibility with WordPress 6.5+ and PHP 7.4+
            - Consider performance optimizations where recommended
            - Update documentation if architectural changes are suggested
            
            **Workflow Run:** ${context.payload.repository.html_url}/actions/runs/${context.runId}
            `;
            
            await core.summary
              .addHeading('üìã WordPress Standards Review')
              .addRaw(summaryContent)
              .write();
            
            console.log('‚úÖ Standards analysis summary created in workflow logs');


